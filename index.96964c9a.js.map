{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    static STATUSES = {\n        IDLE: \"idle\",\n        PLAYING: \"playing\",\n        WIN: \"win\",\n        LOSE: \"lose\"\n    };\n    status = $a5fd07fa01589658$var$Game.STATUSES.IDLE;\n    score = 0;\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        if (initialState.length !== 4) throw Error(\"InitialState should have 4 rows.\");\n        this.state = [];\n        for(let i = 0; i < initialState.length; i++){\n            if (initialState[i].length !== 4) throw Error(\"InitialState should have 4 columns.\");\n            this.state.push([\n                ...initialState[i]\n            ]);\n        }\n    }\n    isStateEqualTo(compareState) {\n        for(let i = 0; i < this.state.length; i++)for(let j = 0; j < this.state[i].length; j++){\n            if (this.state[i][j] !== compareState[i][j]) return false;\n        }\n        return true;\n    }\n    addNewValue(prevState) {\n        if (!this.isStateEqualTo(prevState)) {\n            const randomField = this.getRandomField();\n            this.state[randomField[0]][randomField[1]] = this.getRandomNumber();\n        }\n    }\n    moveLeft() {\n        const prevState = this.state.map((row)=>row.slice());\n        for(let i = 0; i < this.state.length; i++){\n            const moveLeftWithoutAdding = ()=>{\n                for(let k = 0; k < 3; k++){\n                    for(let j = 0; j < this.state[i].length - 1; j++)if (this.state[i][j] === 0 && this.state[i][j + 1] !== 0) {\n                        this.state[i][j] = this.state[i][j + 1];\n                        this.state[i][j + 1] = 0;\n                    }\n                }\n            };\n            const addTwoValuesToLeft = ()=>{\n                for(let j = 0; j < this.state[i].length - 1; j++)if (this.state[i][j] === this.state[i][j + 1] && this.state[i][j] !== 0 && this.state[i][j + 1] !== 0) {\n                    this.state[i][j] = this.state[i][j] + this.state[i][j + 1];\n                    this.score += this.state[i][j];\n                    this.state[i][j + 1] = 0;\n                    j++;\n                }\n            };\n            moveLeftWithoutAdding();\n            addTwoValuesToLeft();\n            moveLeftWithoutAdding();\n        }\n        this.addNewValue(prevState);\n        this.changeStatusIfGameOver();\n    }\n    moveRight() {\n        const prevState = this.state.map((row)=>row.slice());\n        for(let i = 0; i < this.state.length; i++){\n            const moveRightWithoutAdding = ()=>{\n                for(let k = 0; k < 3; k++){\n                    for(let j = 1; j < this.state[i].length; j++)if (this.state[i][j] === 0 && this.state[i][j - 1] !== 0) {\n                        this.state[i][j] = this.state[i][j - 1];\n                        this.state[i][j - 1] = 0;\n                    }\n                }\n            };\n            const addTwoValuesToRight = ()=>{\n                for(let j = 1; j < this.state[i].length; j++)if (this.state[i][j] === this.state[i][j - 1] && this.state[i][j] !== 0 && this.state[i][j - 1] !== 0) {\n                    this.state[i][j] = this.state[i][j] + this.state[i][j - 1];\n                    this.score += this.state[i][j];\n                    this.state[i][j - 1] = 0;\n                    j++;\n                }\n            };\n            moveRightWithoutAdding();\n            addTwoValuesToRight();\n            moveRightWithoutAdding();\n        }\n        this.addNewValue(prevState);\n        this.changeStatusIfGameOver();\n    }\n    moveUp() {\n        const prevState = this.state.map((row)=>row.slice());\n        for(let i = 0; i < this.state.length; i++){\n            const moveUpWithoutAdding = ()=>{\n                for(let k = 0; k < 3; k++){\n                    for(let j = 0; j < this.state[i].length - 1; j++)if (this.state[j][i] === 0 && this.state[j + 1][i] !== 0) {\n                        this.state[j][i] = this.state[j + 1][i];\n                        this.score += this.state[i][j];\n                        this.state[j + 1][i] = 0;\n                    }\n                }\n            };\n            const addTwoValuesToUp = ()=>{\n                for(let j = 0; j < this.state[i].length - 1; j++)if (this.state[j][i] === this.state[j + 1][i] && this.state[j][i] !== 0 && this.state[j + 1][i] !== 0) {\n                    this.state[j][i] = this.state[j][i] + this.state[j + 1][i];\n                    this.score += this.state[i][j];\n                    this.state[j + 1][i] = 0;\n                    j++;\n                }\n            };\n            moveUpWithoutAdding();\n            addTwoValuesToUp();\n            moveUpWithoutAdding();\n        }\n        this.addNewValue(prevState);\n        this.changeStatusIfGameOver();\n    }\n    moveDown() {\n        const prevState = this.state.map((row)=>row.slice());\n        for(let i = 0; i < this.state.length; i++){\n            const moveDownWithoutAdding = ()=>{\n                for(let k = 0; k < 3; k++){\n                    for(let j = 1; j < this.state[i].length; j++)if (this.state[j][i] === 0 && this.state[j - 1][i] !== 0) {\n                        this.state[j][i] = this.state[j - 1][i];\n                        this.state[j - 1][i] = 0;\n                    }\n                }\n            };\n            const addTwoValuesToDown = ()=>{\n                for(let j = 1; j < this.state[i].length; j++)if (this.state[j][i] === this.state[j - 1][i] && this.state[j][i] !== 0 && this.state[j - 1][i] !== 0) {\n                    this.state[j][i] = this.state[j][i] + this.state[j - 1][i];\n                    this.score += this.state[j][i];\n                    this.state[j - 1][i] = 0;\n                    j++;\n                }\n            };\n            moveDownWithoutAdding();\n            addTwoValuesToDown();\n            moveDownWithoutAdding();\n        }\n        this.addNewValue(prevState);\n        this.changeStatusIfGameOver();\n    }\n    changeStatusIfGameOver() {\n        if (this.isWin()) {\n            this.status = $a5fd07fa01589658$var$Game.STATUSES.WIN;\n            return;\n        }\n        if (this.isGameOver()) this.status = $a5fd07fa01589658$var$Game.STATUSES.LOSE;\n    }\n    isGameOver() {\n        for(let i = 0; i < this.state.length; i++)for(let j = 0; j < this.state[i].length; j++){\n            if (this.state[i][j] === 0) return false;\n        }\n        for(let i = 0; i < this.state.length; i++)for(let j = 0; j < this.state[i].length; j++){\n            if (j < this.state.length - 1 && this.state[i][j] === this.state[i][j + 1] || i < this.state.length - 1 && this.state[i][j] === this.state[i + 1][j]) return false;\n        }\n        return true;\n    }\n    isWin() {\n        for(let i = 0; i < this.state.length; i++)for(let j = 0; j < this.state[i].length; j++){\n            if (this.state[i][j] === 2048) return true;\n        }\n        return false;\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        if (this.status === $a5fd07fa01589658$var$Game.STATUSES.IDLE) {\n            this.score = 0;\n            this.status = $a5fd07fa01589658$var$Game.STATUSES.PLAYING;\n            const randomField = this.getRandomField();\n            this.state[randomField[0]][randomField[1]] = this.getRandomNumber();\n        }\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.state = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        if (this.status !== $a5fd07fa01589658$var$Game.STATUSES.IDLE) {\n            this.status = $a5fd07fa01589658$var$Game.STATUSES.IDLE;\n            this.start();\n        }\n    }\n    getRandomNumber() {\n        return Math.random() < 0.1 ? 4 : 2;\n    }\n    getRandomField() {\n        const freePlaces = [];\n        this.state.forEach((row, rowIndex)=>{\n            row.forEach((value, columnIndex)=>{\n                if (value !== 0) return;\n                freePlaces.push([\n                    rowIndex,\n                    columnIndex\n                ]);\n            });\n        });\n        return freePlaces[Math.floor(Math.random() * (freePlaces.length - 1 + 1))];\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$gameScoreElement = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startBtn = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$rows = document.querySelectorAll(\".game-field .field-row\");\nconst $09e991522ca7e64e$var$messageStartElement = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWinElement = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLoseElement = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$gameElements = [\n    ...$09e991522ca7e64e$var$rows\n].map((row)=>{\n    return row.querySelectorAll(\".field-cell\");\n});\n$09e991522ca7e64e$var$startBtn.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.STATUSES.IDLE) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startBtn.textContent = \"Restart\";\n    } else {\n        $09e991522ca7e64e$var$clearBoard();\n        $09e991522ca7e64e$var$gameScoreElement.textContent = 0;\n        $09e991522ca7e64e$var$game.restart();\n    }\n    if ($09e991522ca7e64e$var$startBtn.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$startBtn.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startBtn.classList.add(\"restart\");\n    }\n    if (!$09e991522ca7e64e$var$messageStartElement.classList.contains(\"hidden\")) $09e991522ca7e64e$var$messageStartElement.classList.add(\"hidden\");\n    if (!$09e991522ca7e64e$var$messageWinElement.classList.contains(\"hidden\")) $09e991522ca7e64e$var$messageWinElement.classList.add(\"hidden\");\n    if (!$09e991522ca7e64e$var$messageLoseElement.classList.contains(\"hidden\")) $09e991522ca7e64e$var$messageLoseElement.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$setValuesOnBoard();\n});\nfunction $09e991522ca7e64e$var$clearBoard() {\n    $09e991522ca7e64e$var$gameElements.forEach((row)=>{\n        row.forEach((cell)=>{\n            cell.textContent = \"\";\n            cell.className = \"field-cell\";\n        });\n    });\n}\nfunction $09e991522ca7e64e$var$setValuesOnBoard() {\n    $09e991522ca7e64e$var$gameElements.forEach((row, rowIndex)=>{\n        row.forEach((cell, columnIndex)=>{\n            const value = $09e991522ca7e64e$var$game.getState()[rowIndex][columnIndex];\n            if (value === 0) return;\n            cell.textContent = value;\n            cell.classList.add(`field-cell--${value}`);\n        });\n    });\n}\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.STATUSES.PLAYING) {\n        if (e.key === \"ArrowLeft\") $09e991522ca7e64e$var$game.moveLeft();\n        else if (e.key === \"ArrowRight\") $09e991522ca7e64e$var$game.moveRight();\n        else if (e.key === \"ArrowUp\") $09e991522ca7e64e$var$game.moveUp();\n        else if (e.key === \"ArrowDown\") $09e991522ca7e64e$var$game.moveDown();\n        if ([\n            \"ArrowLeft\",\n            \"ArrowRight\",\n            \"ArrowUp\",\n            \"ArrowDown\"\n        ].includes(event.key)) {\n            $09e991522ca7e64e$var$clearBoard();\n            $09e991522ca7e64e$var$setValuesOnBoard();\n            $09e991522ca7e64e$var$gameScoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n        }\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.STATUSES.WIN) $09e991522ca7e64e$var$messageWinElement.classList.remove(\"hidden\");\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.STATUSES.LOSE) $09e991522ca7e64e$var$messageLoseElement.classList.remove(\"hidden\");\n});\n\n\n//# sourceMappingURL=index.96964c9a.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst gameScoreElement = document.querySelector('.game-score');\nconst startBtn = document.querySelector('.button');\nconst rows = document.querySelectorAll('.game-field .field-row');\nconst messageStartElement = document.querySelector('.message-start');\nconst messageWinElement = document.querySelector('.message-win');\nconst messageLoseElement = document.querySelector('.message-lose');\n\nconst gameElements = [...rows].map((row) => {\n  return row.querySelectorAll('.field-cell');\n});\n\nstartBtn.addEventListener('click', () => {\n  if (game.getStatus() === Game.STATUSES.IDLE) {\n    game.start();\n    startBtn.textContent = 'Restart';\n  } else {\n    clearBoard();\n    gameScoreElement.textContent = 0;\n\n    game.restart();\n  }\n\n  if (startBtn.classList.contains('start')) {\n    startBtn.classList.remove('start');\n    startBtn.classList.add('restart');\n  }\n\n  if (!messageStartElement.classList.contains('hidden')) {\n    messageStartElement.classList.add('hidden');\n  }\n\n  if (!messageWinElement.classList.contains('hidden')) {\n    messageWinElement.classList.add('hidden');\n  }\n\n  if (!messageLoseElement.classList.contains('hidden')) {\n    messageLoseElement.classList.add('hidden');\n  }\n\n  setValuesOnBoard();\n});\n\nfunction clearBoard() {\n  gameElements.forEach((row) => {\n    row.forEach((cell) => {\n      cell.textContent = '';\n      cell.className = 'field-cell';\n    });\n  });\n}\n\nfunction setValuesOnBoard() {\n  gameElements.forEach((row, rowIndex) => {\n    row.forEach((cell, columnIndex) => {\n      const value = game.getState()[rowIndex][columnIndex];\n\n      if (value === 0) {\n        return;\n      }\n\n      cell.textContent = value;\n      cell.classList.add(`field-cell--${value}`);\n    });\n  });\n}\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() === Game.STATUSES.PLAYING) {\n    if (e.key === 'ArrowLeft') {\n      game.moveLeft();\n    } else if (e.key === 'ArrowRight') {\n      game.moveRight();\n    } else if (e.key === 'ArrowUp') {\n      game.moveUp();\n    } else if (e.key === 'ArrowDown') {\n      game.moveDown();\n    }\n\n    if (\n      ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(event.key)\n    ) {\n      clearBoard();\n      setValuesOnBoard();\n\n      gameScoreElement.textContent = game.getScore();\n    }\n  }\n\n  if (game.getStatus() === Game.STATUSES.WIN) {\n    messageWinElement.classList.remove('hidden');\n  }\n\n  if (game.getStatus() === Game.STATUSES.LOSE) {\n    messageLoseElement.classList.remove('hidden');\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  static STATUSES = {\n    IDLE: 'idle',\n    PLAYING: 'playing',\n    WIN: 'win',\n    LOSE: 'lose',\n  };\n\n  status = Game.STATUSES.IDLE;\n  score = 0;\n\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    if (initialState.length !== 4) {\n      throw Error('InitialState should have 4 rows.');\n    }\n\n    this.state = [];\n\n    for (let i = 0; i < initialState.length; i++) {\n      if (initialState[i].length !== 4) {\n        throw Error('InitialState should have 4 columns.');\n      }\n\n      this.state.push([...initialState[i]]);\n    }\n  }\n\n  isStateEqualTo(compareState) {\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] !== compareState[i][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  addNewValue(prevState) {\n    if (!this.isStateEqualTo(prevState)) {\n      const randomField = this.getRandomField();\n\n      this.state[randomField[0]][randomField[1]] = this.getRandomNumber();\n    }\n  }\n\n  moveLeft() {\n    const prevState = this.state.map((row) => row.slice());\n\n    for (let i = 0; i < this.state.length; i++) {\n      const moveLeftWithoutAdding = () => {\n        for (let k = 0; k < 3; k++) {\n          for (let j = 0; j < this.state[i].length - 1; j++) {\n            if (this.state[i][j] === 0 && this.state[i][j + 1] !== 0) {\n              this.state[i][j] = this.state[i][j + 1];\n              this.state[i][j + 1] = 0;\n            }\n          }\n        }\n      };\n\n      const addTwoValuesToLeft = () => {\n        for (let j = 0; j < this.state[i].length - 1; j++) {\n          if (\n            this.state[i][j] === this.state[i][j + 1] &&\n            this.state[i][j] !== 0 &&\n            this.state[i][j + 1] !== 0\n          ) {\n            this.state[i][j] = this.state[i][j] + this.state[i][j + 1];\n            this.score += this.state[i][j];\n            this.state[i][j + 1] = 0;\n            j++;\n          }\n        }\n      };\n\n      moveLeftWithoutAdding();\n      addTwoValuesToLeft();\n      moveLeftWithoutAdding();\n    }\n\n    this.addNewValue(prevState);\n    this.changeStatusIfGameOver();\n  }\n\n  moveRight() {\n    const prevState = this.state.map((row) => row.slice());\n\n    for (let i = 0; i < this.state.length; i++) {\n      const moveRightWithoutAdding = () => {\n        for (let k = 0; k < 3; k++) {\n          for (let j = 1; j < this.state[i].length; j++) {\n            if (this.state[i][j] === 0 && this.state[i][j - 1] !== 0) {\n              this.state[i][j] = this.state[i][j - 1];\n              this.state[i][j - 1] = 0;\n            }\n          }\n        }\n      };\n\n      const addTwoValuesToRight = () => {\n        for (let j = 1; j < this.state[i].length; j++) {\n          if (\n            this.state[i][j] === this.state[i][j - 1] &&\n            this.state[i][j] !== 0 &&\n            this.state[i][j - 1] !== 0\n          ) {\n            this.state[i][j] = this.state[i][j] + this.state[i][j - 1];\n            this.score += this.state[i][j];\n            this.state[i][j - 1] = 0;\n            j++;\n          }\n        }\n      };\n\n      moveRightWithoutAdding();\n      addTwoValuesToRight();\n      moveRightWithoutAdding();\n    }\n\n    this.addNewValue(prevState);\n    this.changeStatusIfGameOver();\n  }\n\n  moveUp() {\n    const prevState = this.state.map((row) => row.slice());\n\n    for (let i = 0; i < this.state.length; i++) {\n      const moveUpWithoutAdding = () => {\n        for (let k = 0; k < 3; k++) {\n          for (let j = 0; j < this.state[i].length - 1; j++) {\n            if (this.state[j][i] === 0 && this.state[j + 1][i] !== 0) {\n              this.state[j][i] = this.state[j + 1][i];\n              this.score += this.state[i][j];\n              this.state[j + 1][i] = 0;\n            }\n          }\n        }\n      };\n\n      const addTwoValuesToUp = () => {\n        for (let j = 0; j < this.state[i].length - 1; j++) {\n          if (\n            this.state[j][i] === this.state[j + 1][i] &&\n            this.state[j][i] !== 0 &&\n            this.state[j + 1][i] !== 0\n          ) {\n            this.state[j][i] = this.state[j][i] + this.state[j + 1][i];\n            this.score += this.state[i][j];\n            this.state[j + 1][i] = 0;\n            j++;\n          }\n        }\n      };\n\n      moveUpWithoutAdding();\n      addTwoValuesToUp();\n      moveUpWithoutAdding();\n    }\n\n    this.addNewValue(prevState);\n    this.changeStatusIfGameOver();\n  }\n\n  moveDown() {\n    const prevState = this.state.map((row) => row.slice());\n\n    for (let i = 0; i < this.state.length; i++) {\n      const moveDownWithoutAdding = () => {\n        for (let k = 0; k < 3; k++) {\n          for (let j = 1; j < this.state[i].length; j++) {\n            if (this.state[j][i] === 0 && this.state[j - 1][i] !== 0) {\n              this.state[j][i] = this.state[j - 1][i];\n              this.state[j - 1][i] = 0;\n            }\n          }\n        }\n      };\n\n      const addTwoValuesToDown = () => {\n        for (let j = 1; j < this.state[i].length; j++) {\n          if (\n            this.state[j][i] === this.state[j - 1][i] &&\n            this.state[j][i] !== 0 &&\n            this.state[j - 1][i] !== 0\n          ) {\n            this.state[j][i] = this.state[j][i] + this.state[j - 1][i];\n            this.score += this.state[j][i];\n            this.state[j - 1][i] = 0;\n            j++;\n          }\n        }\n      };\n\n      moveDownWithoutAdding();\n      addTwoValuesToDown();\n      moveDownWithoutAdding();\n    }\n\n    this.addNewValue(prevState);\n    this.changeStatusIfGameOver();\n  }\n\n  changeStatusIfGameOver() {\n    if (this.isWin()) {\n      this.status = Game.STATUSES.WIN;\n\n      return;\n    }\n\n    if (this.isGameOver()) {\n      this.status = Game.STATUSES.LOSE;\n    }\n  }\n\n  isGameOver() {\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 0) {\n          return false;\n        }\n      }\n    }\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (\n          (j < this.state.length - 1 &&\n            this.state[i][j] === this.state[i][j + 1]) ||\n          (i < this.state.length - 1 &&\n            this.state[i][j] === this.state[i + 1][j])\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  isWin() {\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 2048) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (this.status === Game.STATUSES.IDLE) {\n      this.score = 0;\n\n      this.status = Game.STATUSES.PLAYING;\n\n      const randomField = this.getRandomField();\n\n      this.state[randomField[0]][randomField[1]] = this.getRandomNumber();\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    if (this.status !== Game.STATUSES.IDLE) {\n      this.status = Game.STATUSES.IDLE;\n      this.start();\n    }\n  }\n\n  getRandomNumber() {\n    return Math.random() < 0.1 ? 4 : 2;\n  }\n\n  getRandomField() {\n    const freePlaces = [];\n\n    this.state.forEach((row, rowIndex) => {\n      row.forEach((value, columnIndex) => {\n        if (value !== 0) {\n          return;\n        }\n\n        freePlaces.push([rowIndex, columnIndex]);\n      });\n    });\n\n    return freePlaces[Math.floor(Math.random() * (freePlaces.length - 1 + 1))];\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","STATUSES","IDLE","PLAYING","WIN","LOSE","status","score","constructor","initialState","length","Error","state","i","push","isStateEqualTo","compareState","j","addNewValue","prevState","randomField","getRandomField","getRandomNumber","moveLeft","map","row","slice","moveLeftWithoutAdding","k","addTwoValuesToLeft","changeStatusIfGameOver","moveRight","moveRightWithoutAdding","addTwoValuesToRight","moveUp","moveUpWithoutAdding","addTwoValuesToUp","moveDown","moveDownWithoutAdding","addTwoValuesToDown","isWin","isGameOver","getScore","getState","getStatus","start","restart","Math","random","freePlaces","forEach","rowIndex","value","columnIndex","floor","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$gameScoreElement","document","querySelector","$09e991522ca7e64e$var$startBtn","$09e991522ca7e64e$var$rows","querySelectorAll","$09e991522ca7e64e$var$messageStartElement","$09e991522ca7e64e$var$messageWinElement","$09e991522ca7e64e$var$messageLoseElement","$09e991522ca7e64e$var$gameElements","$09e991522ca7e64e$var$clearBoard","cell","textContent","className","$09e991522ca7e64e$var$setValuesOnBoard","classList","add","addEventListener","contains","remove","e","key","includes","event"],"version":3,"file":"index.96964c9a.js.map"}